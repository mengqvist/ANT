# The ambiguous nucleotide tool (ANT) is a free and open source tool aimed at
# generating and analysing degenerate codons to support research in protein engineering, directed evolution and synthetic biology.

# Copyright (C) 2015  Martin Engqvist |
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LICENSE:
# This file is part of ANT.
#
# ANT is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# ANT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Get source code at: https://github.com/mengqvist/ANT
#


import wx
import math
from base_class import ANTBaseDrawingClass
from base_class import ANTBaseClass
import ANT
import dna
import protein
import re
import pyperclip


class CodonView(ANTBaseDrawingClass):
    """
    The codon view class draws a user interface.
    It also keeps track of mouse events and use those to keep track of user actions.
    The information generated by user actions is used to compute the degenerate codon.
    """

    def __init__(self, parent, id):

        self.highlighted = False  # a variable for keeping track of whether any object is highlighted
        self.codon = False
        self.target = []
        self.possible = []
        self.offtarget = []
        self.AA_count = {}
        self.text_edit_active = False  # to keep track of whether text is being edited
        self.properties_layout = (
            False  # decides whether codon wheel or AA properties view is drawn (True == properties view)
        )

        # set up a dictionary to keep track of which color belongs to what object
        self.catalog = {}  # for matching features with the unique colors
        self.unique_color = (0, 0, 0)

        # set the initial value of a few variables
        self.xc = 0
        self.yc = 0
        self.table = 1  # codon table

        # set what colors the different fields should have
        self.target_color = "#CCFF66"  # chosen amino acids
        self.possible_color = "#FFFF66"  # amino acid that may still be chosen
        self.offtarget_color = "#FF9966"  # off-target amino acids
        self.nucleotide_color = "#8B835F"  # standard nucleotide color
        self.coding_nucleotide_color = "#4B4424"  # for coloring the nucleotides encoded by the degenerate codon
        self.line_color = "#000000"  # for lines
        self.first_nuc_background = "#ffe7ab"  # background of first nucleotide
        self.second_nuc_background = "#ffd976"  # background of second nucleotide
        self.third_nuc_background = "#ffc700"  # background of third nucleotide
        self.aa_background = "#FFFFFF"  # background color for amino acids
        self.aa_highlight = "#FF0000"  # highlight color for the amino acid that mouse pointer hovers over

        # initialize
        super(CodonView, self).__init__(parent, wx.ID_ANY)

        # bind basic mouse events to methods
        self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
        self.Bind(wx.EVT_MOTION, self.OnMotion)

    ############ Setting required methods ####################

    def update_ownUI(self):
        """
        This would get called if the drawing needed to change, for whatever reason.

        The idea here is that the drawing is based on some data generated
        elsewhere in the system. If that data changes, the drawing needs to
        be updated.

        This code re-draws the buffer, then calls Update, which forces a paint event.
        """
        dc = wx.MemoryDC()
        dc.SelectObject(self._Buffer)
        self.Draw(dc)
        dc.SelectObject(wx.NullBitmap)  # need to get rid of the MemoryDC before Update() is called.
        self.Refresh()
        self.Update()

    ############### Done setting required methods #######################

    def Draw(self, dc):
        """
        Method for drawing stuff on self.gcdc.
        This method is responsible for drawing the entire user interface, with the exception of buttons. I add those later.
        """

        # set up the gcdc
        dc.SetBackground(wx.Brush("White"))
        dc.Clear()  # make sure you clear the bitmap!
        self.gcdc = wx.GCDC(dc)  # make gcdc from the dc (for use of transparency and antialiasing)

        # make a hidden dc to which features can be drawn in unique colors and later used for hittests. This drawing only exists in memory.
        self.unique_color = (0, 0, 0)
        self.hidden_dc = wx.MemoryDC()
        self.hidden_dc.SelectObject(wx.EmptyBitmap(self.ClientSize[0], self.ClientSize[1]))
        self.hidden_dc.SetBackground(wx.Brush("White"))
        self.hidden_dc.Clear()  # make sure you clear the bitmap!

        # draw amino acids in one of two representations
        if self.properties_layout is True:
            self.Draw_properties()
        else:
            self.Draw_wheel()

        # draw key explaining highlighting colors
        self.Draw_key()

        # draw degenerate nucleotide
        self.Draw_codon()

        # draw graph showing fequency of amino acids encoded
        self.Draw_graph()

    def Draw_properties(self):
        """
        This is the amino acid properties view.
        Not yet finished!!!!
        """

        #################
        self.xc = 850 / 3  # centre of codon circle in x
        self.yc = 450 / 2  # centre of codon circle in y
        self.Radius = self.yc / 1.2

        pnt_size = 15
        font = wx.Font(
            pointSize=pnt_size, family=wx.FONTFAMILY_SWISS, style=wx.FONTWEIGHT_NORMAL, weight=wx.FONTWEIGHT_BOLD
        )
        self.gcdc.SetFont(font)

        sf = 2  # scaling factor (determines size of drawing)

        ### Draw the ven diagram circles with labels ###
        transparency = 80  # how much transparancy
        wi = 3  # stroke width

        # hydrophobic
        self.gcdc.SetPen(wx.Pen(colour=(85, 123, 12, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((85, 123, 12, transparency)))
        x = -90.70
        y = -63.49
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 115 * sf, 145.02 * sf)

        self.gcdc.SetTextForeground((85, 123, 12))
        self.gcdc.DrawText("Hydrophobic", self.xc - 114.23 * sf, self.yc + -68.64 * sf)

        # small
        self.gcdc.SetPen(wx.Pen(colour=(13, 109, 167, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((13, 109, 167, transparency)))
        x = -51.78
        y = -89.48
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 118 * sf, 111 * sf)

        self.gcdc.SetTextForeground((13, 109, 167))
        self.gcdc.DrawText("Small", self.xc + 49.11 * sf, self.yc + -83.56 * sf)

        # polar
        self.gcdc.SetPen(wx.Pen(colour=(142, 11, 16, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((142, 11, 16, transparency)))
        x = -48.05
        y = -33.58
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 125 * sf, 125 * sf)

        self.gcdc.SetTextForeground((142, 11, 16))
        self.gcdc.DrawText("Polar", self.xc + 74.39 * sf, self.yc + -10.31 * sf)

        # tiny
        self.gcdc.SetPen(wx.Pen(colour=(240, 217, 51, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((240, 217, 51, transparency)))
        x = -22.06
        y = -51.72
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 65.70 * sf, 45.10 * sf)

        self.gcdc.SetTextForeground((240, 217, 51))
        self.gcdc.DrawText("Tiny", self.xc + 27.00 * sf, self.yc + -59.72 * sf)

        # aliphatic
        self.gcdc.SetPen(wx.Pen(colour=(101, 32, 51, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((101, 32, 51, transparency)))
        x = -74.03
        y = -47.80
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 40.69 * sf, 39.22 * sf)

        self.gcdc.SetTextForeground((101, 32, 51))
        self.gcdc.DrawText("Aliphatic", self.xc - 129.18 * sf, self.yc + -38.23 * sf)

        # aromatic
        self.gcdc.SetPen(wx.Pen(colour=(53, 0, 78, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((53, 0, 78, transparency)))
        x = -73.54
        y = 35.74
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 88 * sf, 29.42 * sf)

        self.gcdc.SetTextForeground((53, 0, 78))
        self.gcdc.DrawText("Aromatic", self.xc - 122 * sf, self.yc + 48.78 * sf)

        # negatively charged
        self.gcdc.SetPen(wx.Pen(colour=(255, 138, 41, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((255, 138, 41, transparency)))
        x = 25
        y = -5
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 30 * sf, 35 * sf)

        self.gcdc.SetTextForeground((255, 138, 41))
        self.gcdc.DrawText("Neg. charge", self.xc + 45 * sf, self.yc + 35 * sf)

        # positively charged
        self.gcdc.SetPen(wx.Pen(colour=(23, 105, 117, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((23, 105, 117, transparency)))
        x = -4.53
        y = 25.31
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 40 * sf, 40 * sf)

        self.gcdc.SetTextForeground((23, 105, 117))
        self.gcdc.DrawText("Pos. charge", self.xc + -4.31 * sf, self.yc + 74.40 * sf)

        # stop
        self.gcdc.SetPen(wx.Pen(colour=(128, 128, 128, 255), width=wi))
        self.gcdc.SetBrush(wx.Brush((128, 128, 128, transparency)))
        x = -130
        y = 75
        self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 49 * sf, 20 * sf)

        self.gcdc.SetTextForeground((128, 128, 128))
        self.gcdc.DrawText("Stop", self.xc - 75 * sf, self.yc + 81 * sf)

        # define amino acid positions
        aminoAcids = dict(
            A=dict(aax=-7.96, aay=-43, text="A"),
            S=dict(aax=25.29, aay=-24, text="S"),
            G=dict(aax=15, aay=-46, text="G"),
            P=dict(aax=-5, aay=-75, text="P"),
            C=dict(aax=-2, aay=-24, text="C"),
            V=dict(aax=-45, aay=-36, text="V"),
            I=dict(aax=-64, aay=-40, text="I"),
            L=dict(aax=-60, aay=-25, text="L"),
            M=dict(aax=-76, aay=10, text="M"),
            F=dict(aax=-61, aay=45, text="F"),
            Y=dict(aax=-36, aay=40, text="Y"),
            W=dict(aax=-24, aay=51, text="W"),
            H=dict(aax=2, aay=45, text="H"),
            R=dict(aax=23, aay=45, text="R"),
            K=dict(aax=8, aay=30, text="K"),
            D=dict(aax=32, aay=0, text="D"),
            E=dict(aax=42, aay=15, text="E"),
            N=dict(aax=47, aay=-16, text="N"),
            Q=dict(aax=62, aay=12, text="Q"),
            T=dict(aax=-14, aay=-6, text="T"),
        )

        # I need to add the stop codon extra because dict() does not like the *
        aminoAcids["*"] = dict(aax=-109, aay=80, text="*")

        # special case for when codon table containing unnatural AA is chosen
        if self.table == "1001":
            aminoAcids["U"] = dict(aax=-110, aay=105, text="U")

            # unnatural
            self.gcdc.SetPen(wx.Pen(colour=(0, 170, 136, 255), width=wi))
            self.gcdc.SetBrush(wx.Brush((0, 170, 136, transparency)))
            x = -130
            y = 100
            self.gcdc.DrawEllipse(self.xc + x * sf, self.yc + y * sf, 49 * sf, 20 * sf)

            self.gcdc.SetTextForeground((0, 170, 136))
            self.gcdc.DrawText("Unnatural", self.xc - 75 * sf, self.yc + 106 * sf)

        ### Draw amino acids and circles around them ###
        font = wx.Font(pointSize=17, family=wx.FONTFAMILY_SWISS, style=wx.FONTWEIGHT_NORMAL, weight=wx.FONTWEIGHT_BOLD)
        self.gcdc.SetFont(font)
        self.gcdc.SetTextForeground((0, 0, 0))

        # draw amino acdids with appropriate background color
        for AA in aminoAcids:
            if AA in self.target:  # if current AA is a selected one
                self.gcdc.SetPen(wx.Pen(colour=self.target_color, width=0))
                self.gcdc.SetBrush(wx.Brush(self.target_color))
            elif AA in self.offtarget:  # if it is in the off-targets list
                self.gcdc.SetPen(wx.Pen(colour=self.offtarget_color, width=0))
                self.gcdc.SetBrush(wx.Brush(self.offtarget_color))
            elif (
                AA in self.possible
            ):  # if current AA is among the ones that may be selected without further off-targets
                self.gcdc.SetPen(wx.Pen(colour=self.possible_color, width=0))
                self.gcdc.SetBrush(wx.Brush(self.possible_color))
            else:  # otherwise use standard color
                self.gcdc.SetPen(wx.Pen(colour=self.aa_background, width=0))
                self.gcdc.SetBrush(wx.Brush(colour=(0, 0, 0, 0)))

            # if that amino acid is the highlighted one, show it
            if AA == self.highlighted:
                self.gcdc.SetPen(wx.Pen(colour=self.aa_highlight, width=1))

            # get text extent for circle placing
            text_extent = self.gcdc.GetTextExtent(aminoAcids[AA]["text"])

            # draw the cicle
            self.gcdc.DrawCircle(
                self.xc + aminoAcids[AA]["aax"] * sf + text_extent[0] / 2,
                self.yc + aminoAcids[AA]["aay"] * sf + text_extent[1] / 2,
                pnt_size * 0.9,
            )
            self.gcdc.DrawText(
                aminoAcids[AA]["text"], self.xc + aminoAcids[AA]["aax"] * sf, self.yc + aminoAcids[AA]["aay"] * sf
            )

            # draw hidden color which is used for hittests
            self.catalog[str(self.NextRGB() + (255,))] = AA
            self.hidden_dc.SetPen(wx.Pen(colour=self.unique_color, width=0))
            self.hidden_dc.SetBrush(wx.Brush(colour=self.unique_color))
            self.hidden_dc.DrawCircle(
                self.xc + aminoAcids[AA]["aax"] * sf + text_extent[0] / 2,
                self.yc + aminoAcids[AA]["aay"] * sf + text_extent[1] / 2,
                pnt_size * 0.9,
            )

    def Draw_wheel(self):
        """
        This is the codon wheel view.
        """

        #################
        self.xc = 850 / 3  # centre of codon circle in x
        self.yc = 450 / 2  # centre of codon circle in y
        self.Radius = self.yc / 1.2

        # These parameters determine the "thickness" of the nucleotide and amino acid sections
        first_nucleotide_thickness = self.Radius / 3.0
        second_nucleotide_thickness = self.Radius / 4.5
        third_nucleotide_thickness = self.Radius / 10.0
        amino_acid_thickness = self.Radius / 3.0

        ###########################
        ## draw first nucleotide ##
        ###########################

        # set parameters
        radius = first_nucleotide_thickness
        thickness = first_nucleotide_thickness

        font = wx.Font(
            pointSize=self.Radius / 6.5,
            family=wx.FONTFAMILY_SWISS,
            style=wx.FONTWEIGHT_NORMAL,
            weight=wx.FONTWEIGHT_BOLD,
        )
        self.gcdc.SetFont(font)
        self.gcdc.SetPen(wx.Pen(colour=self.first_nuc_background, width=1))
        self.gcdc.SetBrush(wx.Brush(self.first_nuc_background))
        nucleotides = ["T", "C", "A", "G"]

        # do the drawing
        for i in range(len(nucleotides)):
            # draw the background
            start_angle = 0 + 90 * i
            finish_angle = 90 + 90 * i
            pointlist = self.make_arc(self.xc, self.yc, start_angle, finish_angle, radius, thickness, step=5)
            self.gcdc.DrawPolygon(pointlist)

            # determine text color
            # if nucleotide is part of degenerate codon it should have a different color
            self.gcdc.SetTextForeground((self.nucleotide_color))
            if self.codon is not False:
                if nucleotides[i].replace("U", "T") in dna.UnAmb(self.codon[0]):
                    self.gcdc.SetTextForeground((self.coding_nucleotide_color))

            # draw the text
            text_extent = self.gcdc.GetTextExtent(nucleotides[i])
            x1, y1 = self.AngleToPoints(
                self.xc, self.yc, radius / 2, finish_angle - (finish_angle - start_angle) / 2
            )  # (centre_x, centre_y, radius, angle)
            self.gcdc.DrawText(nucleotides[i], x1 - text_extent[0] / 2, y1 - text_extent[1] / 2)

        ############################
        ## draw second nucleotide ##
        ############################

        # set parameters
        radius = first_nucleotide_thickness + second_nucleotide_thickness
        thickness = second_nucleotide_thickness
        font_size = self.Radius / 12.0
        if font_size < 1:
            print("The problem lies with the self.Radius/12.0. Seems like it is too small.")
            font_size = 10
        font = wx.Font(
            pointSize=self.Radius / 12.0,
            family=wx.FONTFAMILY_SWISS,
            style=wx.FONTWEIGHT_NORMAL,
            weight=wx.FONTWEIGHT_BOLD,
        )
        self.gcdc.SetFont(font)
        self.gcdc.SetPen(wx.Pen(colour=self.second_nuc_background, width=1))
        self.gcdc.SetBrush(wx.Brush(self.second_nuc_background))
        nucleotides = ["TT", "TC", "TA", "TG", "CT", "CC", "CA", "CG", "AT", "AC", "AA", "AG", "GT", "GC", "GA", "GG"]

        # do the drawing
        for i in range(len(nucleotides)):
            # draw the background
            start_angle = 0 + 22.5 * i
            finish_angle = 22.5 + 22.5 * i
            pointlist = self.make_arc(self.xc, self.yc, start_angle, finish_angle, radius, thickness, step=0.5)
            self.gcdc.DrawPolygon(pointlist)

            # determine text color
            # if nucleotide is part of degenerate codon it should have a different color
            self.gcdc.SetTextForeground((self.nucleotide_color))
            if self.codon is not False:
                if nucleotides[i].replace("U", "T") in dna.UnAmb(self.codon[0:2]):
                    self.gcdc.SetTextForeground((self.coding_nucleotide_color))

            # draw the text
            text_extent = self.gcdc.GetTextExtent(nucleotides[i][1])
            x1, y1 = self.AngleToPoints(
                self.xc,
                self.yc,
                first_nucleotide_thickness + second_nucleotide_thickness / 2,
                finish_angle - (finish_angle - start_angle) / 2,
            )
            self.gcdc.DrawText(nucleotides[i][1], x1 - text_extent[0] / 2, y1 - text_extent[1] / 2)

        ###########################
        ## draw third nucleotide ##
        ###########################

        # set parameters
        radius = first_nucleotide_thickness + second_nucleotide_thickness + third_nucleotide_thickness
        thickness = third_nucleotide_thickness
        font = wx.Font(
            pointSize=self.Radius / 25.0,
            family=wx.FONTFAMILY_SWISS,
            style=wx.FONTWEIGHT_NORMAL,
            weight=wx.FONTWEIGHT_BOLD,
        )
        self.gcdc.SetFont(font)
        self.gcdc.SetPen(wx.Pen(colour=self.third_nuc_background, width=1))
        self.gcdc.SetBrush(wx.Brush(self.third_nuc_background))
        codons = [
            "TTT",
            "TTC",
            "TTA",
            "TTG",
            "TCT",
            "TCC",
            "TCA",
            "TCG",
            "TAT",
            "TAC",
            "TAA",
            "TAG",
            "TGT",
            "TGC",
            "TGA",
            "TGG",
            "CTT",
            "CTC",
            "CTA",
            "CTG",
            "CCT",
            "CCC",
            "CCA",
            "CCG",
            "CAT",
            "CAC",
            "CAA",
            "CAG",
            "CGT",
            "CGC",
            "CGA",
            "CGG",
            "ATT",
            "ATC",
            "ATA",
            "ATG",
            "ACT",
            "ACC",
            "ACA",
            "ACG",
            "AAT",
            "AAC",
            "AAA",
            "AAG",
            "AGT",
            "AGC",
            "AGA",
            "AGG",
            "GTT",
            "GTC",
            "GTA",
            "GTG",
            "GCT",
            "GCC",
            "GCA",
            "GCG",
            "GAT",
            "GAC",
            "GAA",
            "GAG",
            "GGT",
            "GGC",
            "GGA",
            "GGG",
        ]

        # do the drawing
        for i in range(len(codons)):
            # draw the background
            start_angle = 0 + 5.625 * i
            finish_angle = 5.625 + 5.625 * i
            pointlist = self.make_arc(self.xc, self.yc, start_angle, finish_angle, radius, thickness, step=0.1)
            self.gcdc.DrawPolygon(pointlist)

            # determine text color
            # if nucleotide is part of degenerate codon it should have a different color
            self.gcdc.SetTextForeground((self.nucleotide_color))
            if self.codon is not False:
                if codons[i].replace("U", "T") in dna.UnAmb(self.codon):
                    self.gcdc.SetTextForeground((self.coding_nucleotide_color))

            # draw the text
            text_extent = self.gcdc.GetTextExtent(codons[i][2])
            x1, y1 = self.AngleToPoints(
                self.xc,
                self.yc,
                first_nucleotide_thickness + second_nucleotide_thickness + third_nucleotide_thickness / 2,
                finish_angle - (finish_angle - start_angle) / 2,
            )
            self.gcdc.DrawText(codons[i][2], x1 - text_extent[0] / 2, y1 - text_extent[1] / 2)

        ############################################
        ## draw the amino acid segments and names ##
        ############################################

        # set parameters
        radius = (
            first_nucleotide_thickness + second_nucleotide_thickness + third_nucleotide_thickness + amino_acid_thickness
        )
        thickness = amino_acid_thickness
        font = wx.Font(
            pointSize=self.Radius / 20.0,
            family=wx.FONTFAMILY_SWISS,
            style=wx.FONTWEIGHT_NORMAL,
            weight=wx.FONTWEIGHT_BOLD,
        )
        self.gcdc.SetFont(font)
        self.gcdc.SetTextForeground(("#000000"))
        finish_angle = 0

        # do the drawing
        AA_width = 0
        current_AA = dna.Translate(codons[0], self.table)
        for codon in codons:
            AA = dna.Translate(codon, self.table)
            if codon == "GGG":  # catch the last codon
                AA_width += 1
                AA = None

            if current_AA == AA:
                AA_width += 1
            else:
                # draw the amino acid segments
                self.gcdc.SetPen(wx.Pen(colour=self.aa_background, width=0))
                if current_AA in self.target:  # if current AA is a selected one
                    self.gcdc.SetPen(wx.Pen(colour=self.target_color, width=0))
                    self.gcdc.SetBrush(wx.Brush(self.target_color))
                elif current_AA in self.offtarget:  # if it is in the off-targets list
                    self.gcdc.SetPen(wx.Pen(colour=self.offtarget_color, width=0))
                    self.gcdc.SetBrush(wx.Brush(self.offtarget_color))
                elif (
                    current_AA in self.possible
                ):  # if current AA is among the ones that may be selected without further off-targets
                    self.gcdc.SetPen(wx.Pen(colour=self.possible_color, width=0))
                    self.gcdc.SetBrush(wx.Brush(self.possible_color))
                else:  # otherwise use standard color
                    self.gcdc.SetBrush(wx.Brush(self.aa_background))
                start_angle = finish_angle
                finish_angle = start_angle + 5.625 * AA_width
                pointlist = self.make_arc(self.xc, self.yc, start_angle, finish_angle, radius, thickness, step=0.1)
                self.gcdc.DrawPolygon(pointlist)

                # draw hidden color which is used for hittests
                self.catalog[str(self.NextRGB() + (255,))] = current_AA

                self.hidden_dc.SetPen(wx.Pen(colour=self.unique_color, width=0))
                self.hidden_dc.SetBrush(wx.Brush(colour=self.unique_color))
                self.hidden_dc.DrawPolygon(pointlist)

                # draw lines
                angle = start_angle
                self.gcdc.SetPen(wx.Pen(colour=self.line_color, width=1))
                if angle in [0, 90, 180, 270]:
                    radius = 0
                elif angle % 22.5 == 0:
                    radius = first_nucleotide_thickness
                elif angle % 5.625 == 0:
                    radius = first_nucleotide_thickness + second_nucleotide_thickness
                x1, y1 = self.AngleToPoints(self.xc, self.yc, radius, angle)
                radius = radius = (
                    first_nucleotide_thickness
                    + second_nucleotide_thickness
                    + third_nucleotide_thickness
                    + amino_acid_thickness
                )
                x2, y2 = self.AngleToPoints(self.xc, self.yc, radius, angle)
                self.gcdc.DrawLine(x1, y1, x2, y2)

                # draw amino acid text
                text_angle = finish_angle - (finish_angle - start_angle) / 2

                if finish_angle <= 180:
                    text_extent = self.gcdc.GetTextExtent(protein.one_to_three(current_AA) + " (%s)" % current_AA)
                    text_radius = (
                        first_nucleotide_thickness + second_nucleotide_thickness + third_nucleotide_thickness
                    ) * 1.05

                    # need to adjust for text height. Imagine right angled triangle. Adjecent is radius. Opposite is half of the text height. Calculate tan angle.
                    tanangle = (0.5 * text_extent[1]) / text_radius  # calculate the Tan(angle)
                    radians = math.atan(tanangle)  # negate the Tan part and get radians
                    degrees = radians * (180 / math.pi)  # convert radians to degrees
                    text_position_angle = text_angle - degrees

                    tx, ty = self.AngleToPoints(self.xc, self.yc, text_radius, text_position_angle)
                    self.gcdc.DrawRotatedText(
                        protein.one_to_three(current_AA) + " (%s)" % current_AA, tx, ty, -text_angle + 90
                    )
                else:
                    text_extent = self.gcdc.GetTextExtent(protein.one_to_three(current_AA) + " (%s)" % current_AA)
                    text_radius = (
                        first_nucleotide_thickness + second_nucleotide_thickness + third_nucleotide_thickness
                    ) * 1.05 + text_extent[0]

                    # need to adjust for text height. Imagine right angled triangle. Adjacent is radius. Opposite is half of the text height. Calculate tan angle.
                    tanangle = (0.5 * text_extent[1]) / text_radius  # calculate the Tan(angle)
                    radians = math.atan(tanangle)  # negate the Tin part and get radians
                    degrees = radians * (180 / math.pi)  # convert radians to degrees
                    text_position_angle = text_angle + degrees

                    tx, ty = self.AngleToPoints(self.xc, self.yc, text_radius, text_position_angle)
                    self.gcdc.DrawRotatedText(
                        protein.one_to_three(current_AA) + " (%s)" % current_AA, tx, ty, -text_angle - 90
                    )

                # now re-set the parameters for the next round
                current_AA = AA
                AA_width = 1

        ###########################################################################
        ## draw the highlighted amino acid (the one that the mouse hovers above) ##
        ###########################################################################

        self.gcdc.SetPen(wx.Pen(colour=self.aa_highlight, width=1))
        self.gcdc.SetBrush(wx.Brush(colour=(0, 0, 0, 0)))  # transparent

        finish_angle = 0
        start_angle = 0
        AA_width = 0
        current_AA = dna.Translate(codons[0], self.table)
        for codon in codons:
            AA = dna.Translate(codon, self.table)
            if codon == "GGG":  # catch the last codon
                AA_width += 1
                AA = None

            if current_AA == AA:
                AA_width += 1
            else:
                # if current AA is highlighted, redraw that segment with a different pen
                finish_angle = start_angle + 5.625 * AA_width
                if current_AA == self.highlighted:  # if highlighted AA is the current one
                    pointlist = self.make_arc(self.xc, self.yc, start_angle, finish_angle, radius, thickness, step=0.1)
                    self.gcdc.DrawPolygon(pointlist)
                start_angle = finish_angle
                current_AA = AA
                AA_width = 1

    def Draw_codon(self):
        """ """

        ###############################
        ## Draw the degenerate codon ##
        ###############################

        # write what the degenerate codon is
        point_size = int(self.Radius / 8)
        font = wx.Font(pointSize=point_size, family=wx.FONTFAMILY_SWISS, style=wx.ITALIC, weight=wx.FONTWEIGHT_NORMAL)
        self.gcdc.SetFont(font)
        self.gcdc.SetTextForeground((self.line_color))
        x = 850 * 0.62
        y = 450 * 0.08
        text = "Codon:"
        self.gcdc.DrawText(text, x, y)

        x = 850 * 0.75
        point_size = int(self.Radius / 6)
        font = wx.Font(
            pointSize=point_size, family=wx.FONTFAMILY_SWISS, style=wx.FONTWEIGHT_NORMAL, weight=wx.FONTWEIGHT_NORMAL
        )
        self.gcdc.SetFont(font)
        self.gcdc.SetTextForeground((self.coding_nucleotide_color))

        if self.codon is False:
            text = ""
        else:
            text = self.codon
        self.gcdc.DrawText(text, x, y)

        # below the degenerate codon, list the bases it codes for
        if self.codon is not False:
            # get text position based on the ambigous codon
            first_x = x + self.gcdc.GetTextExtent(text[0:1])[0] - self.gcdc.GetTextExtent(text[0])[0] / 2
            second_x = x + self.gcdc.GetTextExtent(text[0:2])[0] - self.gcdc.GetTextExtent(text[1])[0] / 2
            third_x = x + self.gcdc.GetTextExtent(text[0:3])[0] - self.gcdc.GetTextExtent(text[2])[0] / 2
            start_y = y + self.gcdc.GetTextExtent(text[0])[1]

            # set new text size
            point_size = int(self.Radius / 18)
            font = wx.Font(
                pointSize=point_size, family=wx.FONTFAMILY_SWISS, style=wx.FONTSTYLE_ITALIC, weight=wx.FONTWEIGHT_NORMAL
            )
            self.gcdc.SetFont(font)
            self.gcdc.SetTextForeground((self.coding_nucleotide_color))

            first = dna.UnAmb(self.codon[0])
            second = dna.UnAmb(self.codon[1])
            third = dna.UnAmb(self.codon[2])

            first_y = start_y
            for i in range(0, len(first)):
                text = first[i]
                # adjust for the size of that text
                pos_x = first_x - self.gcdc.GetTextExtent(text)[0] / 2
                self.gcdc.DrawText(text, pos_x, first_y)
                first_y += point_size * 1.2

            second_y = start_y
            for i in range(0, len(second)):
                text = second[i]
                # adjust for the size of that text
                pos_x = second_x - self.gcdc.GetTextExtent(text)[0] / 2
                self.gcdc.DrawText(text, pos_x, second_y)
                second_y += point_size * 1.2

            third_y = start_y
            for i in range(0, len(third)):
                text = third[i]
                # adjust for the size of that text
                pos_x = third_x - self.gcdc.GetTextExtent(text)[0] / 2
                self.gcdc.DrawText(text, pos_x, third_y)
                third_y += point_size * 1.2

    def Draw_key(self):
        """ """
        ##############
        ## draw key	##
        ##############

        width = self.Radius / 16
        height = self.Radius / 16

        point_size = int(self.Radius / 20)
        font = wx.Font(
            pointSize=point_size, family=wx.FONTFAMILY_SWISS, style=wx.FONTWEIGHT_NORMAL, weight=wx.FONTWEIGHT_NORMAL
        )
        self.gcdc.SetFont(font)
        self.gcdc.SetTextForeground(("#666666"))

        # target AA key
        text = "Target AA"
        x = 10
        y = 10
        self.gcdc.SetBrush(wx.Brush(self.target_color))
        self.gcdc.SetPen(wx.Pen(colour="#666666", width=0))
        self.gcdc.DrawRectangle(x, y, width, height)
        self.gcdc.DrawText(text, x + width * 1.2, y)

        # possible AA key
        text = "Possible AA"
        x = 10
        y += point_size * 1.5
        self.gcdc.SetBrush(wx.Brush(self.possible_color))
        self.gcdc.SetPen(wx.Pen(colour="#E6E65C", width=1))
        self.gcdc.DrawRectangle(x, y, width, height)
        self.gcdc.DrawText(text, x + width * 1.2, y)

        # off-target AA key
        text = "Off-target AA"
        x = 10
        y += point_size * 1.5
        self.gcdc.SetBrush(wx.Brush(self.offtarget_color))
        self.gcdc.SetPen(wx.Pen(colour="#666666", width=0))
        self.gcdc.DrawRectangle(x, y, width, height)
        self.gcdc.DrawText(text, x + width * 1.2, y)

    def Draw_graph(self):
        """ """
        ################
        ## draw graph ##
        ################

        if self.codon is False:
            text = " "
        else:
            text = self.codon

        AA_order = (
            "A",
            "C",
            "D",
            "E",
            "F",
            "G",
            "H",
            "I",
            "K",
            "L",
            "M",
            "N",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "V",
            "W",
            "Y",
            "*",
            "U",
        )
        AA_full = {
            "F": "Phenylalanine",
            "L": "Leucine",
            "S": "Serine",
            "Y": "Tyrosine",
            "*": "Stop",
            "C": "Cysteine",
            "stop2": "Stop",
            "W": "Tryptophan",
            "L2": "Leucine",
            "P": "Proline",
            "H": "Histidine",
            "Q": "Glutamine",
            "R": "Arginine",
            "I": "Isoleucine",
            "M": "Methionine",
            "T": "Threonine",
            "N": "Asparagine",
            "K": "Lysine",
            "S2": "Serine",
            "R2": "Arginine",
            "V": "Valine",
            "A": "Alanine",
            "D": "Aspartic acid",
            "E": "Glutamic acid",
            "G": "Glycine",
            "U": "Unnatural AA",
        }

        originx = 850 * 0.75  # centre of plot in x
        originy = 450 * 0.4  # centre of plot in y
        sizex = 850 * 0.2
        sizey = 450 * 0.55

        xspacing = sizex / 7
        yspacing = float(sizey) / float(22)
        tick_size = sizex / 30

        # draw background rectangle
        self.gcdc.SetBrush(wx.Brush("#fff2d1"))
        self.gcdc.SetPen(wx.Pen(colour=self.line_color, width=1))
        self.gcdc.DrawRectangle(originx, originy, sizex, sizey)

        # title
        point_size = int(sizex / 15)
        font = wx.Font(
            pointSize=point_size, family=wx.FONTFAMILY_SWISS, style=wx.FONTWEIGHT_NORMAL, weight=wx.FONTWEIGHT_NORMAL
        )
        self.gcdc.SetFont(font)
        self.gcdc.SetTextForeground((self.line_color))
        title = "Codon count for each AA"
        self.gcdc.DrawText(title, originx, originy - self.gcdc.GetTextExtent(text)[1] * 2)

        # y labels (amino acids)
        point_size = int(self.Radius / 23.0)
        font = wx.Font(
            pointSize=point_size, family=wx.FONTFAMILY_SWISS, style=wx.FONTWEIGHT_NORMAL, weight=wx.FONTWEIGHT_NORMAL
        )
        self.gcdc.SetFont(font)
        self.gcdc.SetTextForeground((self.line_color))
        for i in range(0, 22):
            amino_acid = "%s(%s)" % (protein.one_to_three(AA_order[i]), AA_order[i])
            self.gcdc.DrawText(
                amino_acid,
                originx - self.gcdc.GetTextExtent(amino_acid)[0] - tick_size,
                originy + (yspacing * i + yspacing / 2.0) - self.gcdc.GetTextExtent(amino_acid)[1] / 2,
            )

        # x labels (count)
        for i in range(1, 7):
            self.gcdc.DrawText(
                str(i),
                originx + xspacing * i - self.gcdc.GetTextExtent("6")[0] / 2,
                originy - self.gcdc.GetTextExtent("6")[1] - tick_size / 2.0,
            )

        # x ticks
        for i in range(1, 7):
            self.gcdc.DrawLine(originx + (xspacing * i), originy, originx + (xspacing * i), originy + tick_size)
            self.gcdc.DrawLine(
                originx + (xspacing * i), originy + sizey, originx + (xspacing * i), originy + sizey - tick_size
            )

        # 		#y ticks
        for i in range(1, 22):
            self.gcdc.DrawLine(originx, originy + (yspacing * i), originx + tick_size, originy + (yspacing * i))
            self.gcdc.DrawLine(
                originx + sizex, originy + (yspacing * i), originx + sizex - tick_size, originy + (yspacing * i)
            )

        # draw bars according to how many times each AA is encoded
        if self.codon is not False:
            for i in range(0, 22):
                AA = AA_order[i]
                if AA in self.target:  # if current AA is a selected one
                    self.gcdc.SetBrush(wx.Brush(self.target_color))
                elif AA in self.offtarget:  # if it is in the off-targets list
                    self.gcdc.SetBrush(wx.Brush(self.offtarget_color))
                else:
                    self.gcdc.SetBrush(wx.Brush("#666666"))

                count = self.AA_count[AA]
                self.gcdc.DrawRectangle(
                    originx, originy + yspacing * i + yspacing * 0.1, count * xspacing, yspacing * 0.8
                )  # (x, y, w, h)

    ##############################################################

    def HitTest(self):
        """
        Tests whether the mouse is over any amino acid field.
        """
        dc = wx.ClientDC(self)  # get the client dc
        x, y = self.ScreenToClient(wx.GetMousePosition())  # get coordinate of mouse event
        pixel_color = self.hidden_dc.GetPixel(x, y)  # use that coordinate to find pixel on the hidden dc
        return self.catalog.get(str(pixel_color))  # return the amino acid

    def OnLeftUp(self, event):
        """
        When the depressed left mouse button is released, determine whether the mouse was above an amino acid field.
        If it was, append that amino acid to the list of chosen amino acids.
        If the amino acid was already chosen, then remove it from the selection.
        """
        amino_acid = self.HitTest()
        if amino_acid is not None:
            if amino_acid not in self.target:
                self.target.append(amino_acid)
            elif amino_acid in self.target:
                self.target.remove(amino_acid)
            else:
                raise ValueError

        if len(self.target) > 0:
            codon_object = ANT.DegenerateCodon(self.target, self.table)
            self.codon = codon_object.getTriplet()
            self.target = codon_object.getTarget()
            self.offtarget = codon_object.getOffTarget()
            self.possible = codon_object.getPossible()
            self.AA_count = codon_object.getCodonsPerAA()
            self.report = codon_object.getReport()
        else:
            self.codon = False
            self.offtarget = []
            self.possible = []

        # update drawing
        self.update_ownUI()

    def OnMotion(self, event):
        """
        When mouse is moved, test whether it hovers above an amino acid field.
        """
        amino_acid = self.HitTest()

        if amino_acid is not self.highlighted:  # if the index did not change
            self.highlighted = amino_acid

            # update drawing
            self.update_ownUI()


# make new class and add in buttons and the codon wheel view
class CodonButtonWrapper(ANTBaseClass):
    """
    This class is intended to glue together the plasmid drawing with control buttons.
    """

    def __init__(self, parent, id):
        ANTBaseClass.__init__(self, parent, id)
        self.codon_view = CodonView(self, -1)

        # buttons
        reset = wx.Button(self, 1, "Reset")
        self.evaluate = wx.Button(self, 5, "Evaluate Codon")
        self.evaluate.Disable()  # disable the button by default
        self.copy = wx.Button(self, 6, "Copy to Clipboard")

        # the combobox
        options = [
            "1: Standard Code",
            "2: Vertebrate Mitochondrial Code",
            "3: Yeast Mitochondrial Code",
            "4: Mold, Protozoan, Coelenterate Mitochondrial Code",
            "5: Invertebrate Mitochondrial Code",
            "6: Ciliate, Dasycladacean and Hexamita Nuclear Code",
            "9: Echinoderm and Flatworm Mitochondrial Code",
            "10: Euplotid Nuclear Code",
            "11: Bacterial, Archaeal and Plant Plastid Code",
            "12: Alternative Yeast Nuclear Code",
            "13: Ascidian Mitochondrial Code",
            "14: Alternative Flatworm Mitochondrial Code",
            "15: Blepharisma Nuclear Code",
            "16: Chlorophycean Mitochondrial Code",
            "21: Trematode Mitochondrial Code",
            "22: Scenedesmus obliquus mitochondrial Code",
            "23: Thraustochytrium Mitochondrial Code",
            "24: Pterobranchia mitochondrial Code",
            "25: Candidate Division SR1 and Gracilibacteria Code",
            "1001: Standard Code With UAG Codon Reassignment",
        ]
        self.combobox = wx.ComboBox(self, id=2, size=(-1, -1), choices=options, style=wx.CB_READONLY)
        self.combobox.Select(0)

        # text input field
        self.input_codon = wx.TextCtrl(self, id=4, size=(50, -1), style=wx.TE_RICH)

        # the checkbox
        self.AA_layout = wx.CheckBox(self, id=7, label="Amino acid properties layout")

        # bind actions to buttons, text field and combobox
        self.Bind(wx.EVT_BUTTON, self.OnReset, id=1)
        self.Bind(wx.EVT_COMBOBOX, self.OnComboboxSelect, id=2)
        self.Bind(wx.EVT_TEXT, self.InputCodonOnText, id=4)
        self.Bind(wx.EVT_BUTTON, self.OnEvaluate, id=5)
        self.Bind(wx.EVT_BUTTON, self.OnCopy, id=6)
        self.Bind(wx.EVT_CHECKBOX, self.OnLayout, id=7)

        # arrange buttons, text field and combobox vertically
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(item=reset)
        sizer.Add(item=self.combobox)
        sizer.Add(item=self.input_codon, flag=wx.LEFT, border=50)
        sizer.Add(item=self.evaluate)
        sizer.Add(item=self.copy, flag=wx.LEFT, border=50)

        # the second row of buttons
        sizer_2nd_row = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2nd_row.Add(item=self.AA_layout)
        # 		sizer_2nd_row.Add(item=wx.StaticText(self, wx.ID_ANY, 'test'))

        # add buttons on top and the codon wheel on the bottom
        sizer2 = wx.BoxSizer(wx.VERTICAL)
        sizer2.Add(item=sizer, proportion=0, flag=wx.EXPAND)
        sizer2.Add(item=sizer_2nd_row, proportion=0, flag=wx.EXPAND)
        sizer2.Add(item=self.codon_view, proportion=-1, flag=wx.EXPAND)

        self.SetSizer(sizer2)

    def update_ownUI(self):
        """
        User interface updates by redrawing the codon wheel, associated graph and displayed codon.
        """
        self.codon_view.update_ownUI()

    def OnReset(self, evt):
        """
        When reset button is clicked, remove all chosen amino acids.
        """
        self.codon_view.codon = False
        self.codon_view.target = []
        self.codon_view.offtarget = []
        self.codon_view.possible = []
        self.codon_view.report = ""

        # update drawing
        self.update_ownUI()

    def OnComboboxSelect(self, evt):
        """
        When a codon table is chosen from the combobox, generate a new codon object, update parameters and update drawing.
        """
        self.codon_view.table = self.combobox.GetValue().split(":")[0]

        # compute result with new table
        if len(self.codon_view.target) > 0:
            codon_object = ANT.DegenerateCodon(self.codon_view.target, self.codon_view.table)
            self.codon_view.codon = codon_object.getTriplet()
            self.codon_view.target = codon_object.getTarget()
            self.codon_view.offtarget = codon_object.getOffTarget()
            self.codon_view.possible = codon_object.getPossible()
            self.codon_view.AA_count = codon_object.getCodonsPerAA()
            self.codon_view.report = codon_object.getReport()
        # update drawing
        self.update_ownUI()

    def InputCodonOnText(self, evt):
        """
        When text is entered into the text field, check if it is a valid degenerate codon.
        The validity of the codon affects the text color and whether the "Evaluate" button is activated or not.
        """
        codon = str(self.input_codon.GetLineText(0)).upper()  # get the input codon

        # if it is a valid codon, make text black and activate enable button. If not, red text and disabled button.
        m = re.match("^[GATCRYWSMKHBVDN]{3}$", codon)
        if m != None:
            self.input_codon.SetForegroundColour(wx.BLACK)
            self.evaluate.Enable()
        elif m == None:
            self.input_codon.SetForegroundColour(wx.RED)
            self.evaluate.Disable()

    def OnEvaluate(self, evt):
        """
        When the evaluate button is pressed, compute which amino acids it encodes and update drawing.
        """
        # make a codon object with the codon and then set parameters accordingly
        codon_object = ANT.DegenerateCodon(str(self.input_codon.GetLineText(0)).upper(), self.codon_view.table)
        self.codon_view.codon = codon_object.getTriplet()
        self.codon_view.target = codon_object.getTarget()
        self.codon_view.offtarget = codon_object.getOffTarget()
        self.codon_view.possible = codon_object.getPossible()
        self.codon_view.AA_count = codon_object.getCodonsPerAA()
        self.codon_view.report = codon_object.getReport()

        # update drawing
        self.update_ownUI()

    def OnCopy(self, evt):
        """
        Copy a report to the clipboard.
        """
        if self.codon_view.codon is False:
            pyperclip.copy("No selection has been made.")
        else:
            pyperclip.copy(self.codon_view.report)

    def OnLayout(self, evt):
        """
        When the Amino acid layout checkbox is changed, read the value and update the drawing.
        """
        # get checkbox state and update variable
        sender = evt.GetEventObject()
        self.codon_view.properties_layout = sender.GetValue()

        # update drawing
        self.update_ownUI()


##### main loop
class MyApp(wx.App):
    def OnInit(self):
        frame = wx.Frame(None, -1, title="ANT", size=(900, 535))
        panel = CodonButtonWrapper(frame, -1)
        frame.Centre()
        frame.Show(True)
        self.SetTopWindow(frame)
        return True


if __name__ == "__main__":  # if script is run by itself and not loaded
    app = MyApp(0)
    app.MainLoop()
